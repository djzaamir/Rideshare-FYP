1) Change of Design Plan:
    Originally i was thinking that Driver will only be able to drive car's
    And Customers will only be able to search for driver's

   Now i have decided that a User will be able to do both,    (because other Ride Sharing Apps provides this kinda of facility)
   a) Getting a Ride
   b) Sharing a Ride

   Initially when a user signup they would have to provide general details
   But later on if they decide to Share their Ride with others, they would have to complete
   another small signup which will include details about their Vehicle and other imp stuff

2) Currently i am dropping DOB attribute, coz i dont see any useful point of it other than Data Minining
   Perspective, it can be easily added  back later if needed!

3) Huge hiccup during the development, So i was at this point where i had to integrate
   Drawerlayout inside my application, and i was not able to share a single Drawerlayout with
   multiple activities.
   sp i started to go with other useless approaches for example, creating Drawerlayout for
   every single activity in my application
   This was,
   A) Not good
   B) Redundant code
   c) Not maintainable
   D) wasted alot of my time

   In the end I had to get back to drawing board, and learn how to properly share a single DrawerLayout
   with multiple activities

   All of it resulted in setbacks, both code-wise and time-wise
   //This video really helped me alot to solve this problem
   https://www.youtube.com/watch?v=SIW6RCYmBBo00

4) ok so another Imp Design decision, even though Firebase Provides some very abstracted functions data will trigger and let you know
   about any updated data node you have placed listeners on.
   I want to further abstract this out because Different kind of user-data related to user profile and other stuff will be required
   in different type's of activities and fragments
   So i am thinking to have a singleton class, and all the different listeners and logic related to that data will go inside
   this class
   Now from here Any instered party can call methods and use data properties from this class
   This class will make sure that it always have updated data from firebase will sync with firebase on the background

5) Now using java Calendar class and Time Stamps for managing date and time which is alot cleaner and effective way of doing things
   Also making sure that No Past Times can be selected in Start_date_and_time timeStamp i-e No Date Less than current date
   And No Past can be selected which is less than start_date_and_time because that would be very strange

6) Buttons are now being disable along with their titles which are being changed to some meaningful text e.g Logging in...
   Indicating, some work is being performed on the background
   All of this is being managed by a ButtonUtil's class, to reduce code

7) I forgot to add the sha-1 hash of my laptop to firebase, and when i tried to compile my App from my laptop
   Android-Studio pushed my laptop's sha-1 hash into the APP, hence Firebase was refusing to communicate
   So wasted alot of my time, its was very important to consider these things when working with servies like google

8) Finally added the recyclerView which show's the matching drivers, yes it was a bit tricky because of the Asynchronous nature of the
   Application, but now it's working fine,here's a little run down of how its working below
   *) First of All i im taking care of finding the nearest drivers, you can look for exact strategy for this in the code with detailed
      comments
   *) After that i am loading all of the matching driver's data into a recylcerView
       For the recyclerview we basically need to take for a few things
        1) Declare a recylcerView in the XML layout file where you wish the list to show up
        2) Declare any dependencies in the Android Manifest file
        3) Need to define an adapter class which adapt the data to Recycler view
        4) Need to define view holder class which will hold the XMl layout for each row
           This holder class also makes sure to cache the rows whenever the go out of view from the screen

   Some mistakes which i was making`
   1) Not returning the data item count in the adapter class
   2) Also i had to explicitly define black colors for different text, because somehow it was getting messed up
   This is tutorial i followed for recyclerView Part TODO https://www.youtube.com/watch?v=Wq2o4EbM74k
   From slidenerd


9) Added A static Ad Manager Class , which can be accessed and edited from anywhere, provides the
   functionality to check weather or not the user has seen any ad, if so then do'nt display it
   for sometime lets say for 1-Minute
   The State will be automatically reset using an Internal Thread inside this class
   mention this while presenting your project,or add it the presentation



10) Ads Manager class working fine, Dummy Ad being successfully shown
its stays there until user watches complete Ad
Once complete Ad is watched AdManager Automatically Disables it for N
amount of time, and the re-ables Ad's ,  mention about this behavior

11) Mention about that ads are randomly being fetched and displayed

12) Using Thread.Stop() depricated method in AdActivity onBackPressed() Method
    Provide a proper fix

13) How i am going to structure the schema for chat module in firebase
    Every User will have a chats Key-value pair like this
     firebase-root/users/chats_history/
                              key-1:other_user_id   => Points a complete chat history between two people,other_user_id to load other                                                         user details
                                               /chat_node
                                                /msg
                                                /user_id => Who sent it
                                                /timestamp

                              key-2:other_user_id
                              key-n:other_user_id
     This key will point to a unique Chat History within another firebase data node which is
      firebase-root/chats/
                                  key-1/                => A unique chat history between two people
                                       user-name:Aamir
                                       msg:hey now brown cow

                                       user-name:Khan
                                       msg:wow now brown cow

                                       user-name:Aamir
                                       msg:yeh cheez mere Aziz

                                  key-2/
                                  key-n/
14) Mention about use of  Haversine formula to calculate distance between two points

15) contact button in driver details does'nt enable unless a background chat history check has been performed
     mention about custom event handler's for this purpose

16) Always choose a project development structure for example
    modules
     module_a
       main_classes
       interfaces
       dependencies
       notes
     module_b
       main_classes
       interfaces
       dependencies
       notes

17) Made sure that the heavy running chat activity ValueEventListeners Disconnects
       when the activity is no longer visible or running
       and restarts when the activity becomes visible again

18) Mention About Dedicated Chat Module

19) Using Firebase OrderBy And LimitTo Functions to work on timestamp , in order to only fetch latest messages
    while displaying the most recent message in Chat-Messages-ListView ,  it works fine but now i am not using it

20) it would be great to use different enums constants in places of Strings-tags for examples while putting data in different intent      putExtra fields i have to remember the exact String-tag name , if i use enums the Intellisense of the IDE will quickly pick it up     and help me type it and different places without switching to different files again and

21) Talk about different unique features of chatActivity and Chat ListView , how it sorts and displays the most recent chats
    and how i am using timestamps to organize things very neatly

22) Make sure to secure Firebase Rules, if you ever decide to use firebase in a production scenario

23) Due to a bad design decision i am stuck with the problem of Empty Conversation Nodes Inside Chat-List Activity
    because its not very big deal, and very much time consuming thats why i am keeping it the way it is
    i-e fetching all conversations from Firebase Even if they don't have any messages

24) Detaching and re-attaching locationRequest event listener's when the Activity goes to background or comes to foreground
    mention about why this is important and how this saves battery life and bandwidth in the documentation and presentation

25) i Believe it'd be a better idea to move the Permission code to RideShareLocationManager Class
    and let this class check for Permissions everytime it tries to access location data

26) Ok so here's a thing for getting fast-one-location
    inside RideShareLocationManager I can get Location with two methods
    1) getLastKnownLocation()   => One time Location update, very quick , but not very accurate
    2 requestLocationUpdates(...)  => Perdiodic Location Updates, takes little time , but pretty Accurate

    I can design the class in such a way that at first i get location via getLastKnownLocation() for Quick Inaccurate Location data
    and after that subscribe for time consuming Periodic Updates for accurate Location data


    Or i can eliminate the inaccurate Location data by just Using requestLocationUpdates() , and display some kinda
    progressBar while waiting for Location Results

    i think for now , i will be using the second approach the one which takes a little while but provides very accurate results
    requestLocationUpdates() , and show a little progressbar while waiting or Location data

27) Mention about universal Sanitization class
28) Mention about how signup activity automatically fills in email when tries to access from sign-in activity

29) Mention about How Settings Activity is using Code Reusebility beautifully

30) Also mention how you are making sure that the mose recent data is loaded from firebase while Updating data from
    ChangeSettingsActivity, Look at variables if you forget what i am talking about

31) Mention , why I'm not exchanging cell numbers, and using my own chat engine, to protect users privacy

32) Why login dialog is needed when changing Email, Because Firebase Only Permits Email changing operation to recent logins

33) You could have avoided all the spagehtii code while updating email and re-authenticating email via user
    by just comparing it From FirebaseAuth().getInstance().getCurrentUser().getEmail()
    instead of querying Firebase Servers :( , could have saved 3 hours

34) Mention about the extreme dynamic Nature of Info-Button and Request-Button(AKA function-button) in chatActivity

35) its very important to Limit user input where ever you can , for example if you allow a user to enter a Name
    potentially of 200 characters, then you are going to have very hard time dealing with this issue in the GUI controls
    A very good approach would be to stop it right there, while taking inputs

36) Mention about Rides History
