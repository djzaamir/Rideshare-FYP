1) Change of Design Plan:
    Originally i was thinking that Driver will only be able to drive car's
    And Customers will only be able to search for driver's

   Now i have decided that a User will be able to do both,    (because other Ride Sharing Apps provides this kinda of facility)
   a) Getting a Ride
   b) Sharing a Ride

   Initially when a user signup they would have to provide general details
   But later on if they decide to Share their Ride with others, they would have to complete
   another small signup which will include details about their Vehicle and other imp stuff

2) Currently i am dropping DOB attribute, coz i dont see any useful point of it other than Data Minining
   Perspective, it can be easily added  back later if needed!

3) Huge hiccup during the development, So i was at this point where i had to integrate
   Drawerlayout inside my application, and i was not able to share a single Drawerlayout with
   multiple activities.
   sp i started to go with other useless approaches for example, creating Drawerlayout for
   every single activity in my application
   This was,
   A) Not good
   B) Redundant code
   c) Not maintainable
   D) wasted alot of my time

   In the end I had to get back to drawing board, and learn how to properly share a single DrawerLayout
   with multiple activities

   All of it resulted in setbacks, both code-wise and time-wise
   //This video really helped me alot to solve this problem
   https://www.youtube.com/watch?v=SIW6RCYmBBo00

4) ok so another Imp Design decision, even though Firebase Provides some very abstracted functions data will trigger and let you know
   about any updated data node you have placed listeners on.
   I want to further abstract this out because Different kind of user-data related to user profile and other stuff will be required
   in different type's of activities and fragments
   So i am thinking to have a singleton class, and all the different listeners and logic related to that data will go inside
   this class
   Now from here Any instered party can call methods and use data properties from this class
   This class will make sure that it always have updated data from firebase will sync with firebase on the background

5) Now using java Calendar class and Time Stamps for managing date and time which is alot cleaner and effective way of doing things
   Also making sure that No Past Times can be selected in Start_date_and_time timeStamp i-e No Date Less than current date
   And No Past can be selected which is less than start_date_and_time because that would be very strange

6) Buttons are now being disable along with their titles which are being changed to some meaningful text e.g Logging in...
   Indicating, some work is being performed on the background
   All of this is being managed by a ButtonUtil's class, to reduce code

7) I forgot to add the sha-1 hash of my laptop to firebase, and when i tried to compile my App from my laptop
   Android-Studio pushed my laptop's sha-1 hash into the APP, hence Firebase was refusing to communicate
   So wasted alot of my time, its was very important to consider these things when working with servies like google

8) Finally added the recyclerView which show's the matching drivers, yes it was a bit tricky because of the Asynchronous nature of the
   Application, but now it's working fine,here's a little run down of how its working below
   *) First of All i im taking care of finding the nearest drivers, you can look for exact strategy for this in the code with detailed
      comments
   *) After that i am loading all of the matching driver's data into a recylcerView
       For the recyclerview we basically need to take for a few things
        1) Declare a recylcerView in the XML layout file where you wish the list to show up
        2) Declare any dependencies in the Android Manifest file
        3) Need to define an adapter class which adapt the data to Recycler view
        4) Need to define view holder class which will hold the XMl layout for each row
           This holder class also makes sure to cache the rows whenever the go out of view from the screen

   Some mistakes which i was making`
   1) Not returning the data item count in the adapter class
   2) Also i had to explicitly define black colors for different text, because somehow it was getting messed up
   This is tutorial i followed for recyclerView Part TODO https://www.youtube.com/watch?v=Wq2o4EbM74k
   From slidenerd


9) Added A static Ad Manager Class , which can be accessed and edited from anywhere, provides the
   functionality to check weather or not the user has seen any ad, if so then do'nt display it
   for sometime lets say for 1-Minute
   The State will be automatically reset using an Internal Thread inside this class
   mention this while presenting your project,or add it the presentation



